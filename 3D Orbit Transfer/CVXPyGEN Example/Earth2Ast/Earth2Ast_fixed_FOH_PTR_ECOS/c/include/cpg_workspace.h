
/*
Auto-generated by CVXPYgen on September 15, 2025 at 01:13:44.
Content: Type definitions and variable declarations.
*/

#include "ecos.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef double cpg_float;
typedef int cpg_int;

// Compressed sparse column matrix
typedef struct {
  cpg_int      *p;
  cpg_int      *i;
  cpg_float    *x;
  cpg_int      nnz;
} cpg_csc;

// Canonical parameters
typedef struct {
  cpg_float    *c;         // Canonical parameter c
  cpg_float    d;          // Canonical parameter d
  cpg_csc      *A;         // Canonical parameter A
  cpg_float    *b;         // Canonical parameter b
  cpg_csc      *G;         // Canonical parameter G
  cpg_float    *h;         // Canonical parameter h
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        c;            // Bool, if canonical parameter c outdated
  int        d;            // Bool, if canonical parameter d outdated
  int        A;            // Bool, if canonical parameter A outdated
  int        b;            // Bool, if canonical parameter b outdated
  int        G;            // Bool, if canonical parameter G outdated
  int        h;            // Bool, if canonical parameter h outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  cpg_float    *U;         // Your variable U
  cpg_float    *V;         // Your variable V
  cpg_float    *v_0;       // Your variable v_0
  cpg_float    *v_N;       // Your variable v_N
  cpg_float    *eta;       // Your variable eta
  cpg_float    *X;         // Your variable X
  cpg_float    *p;         // Your variable p
} CPG_Prim_t;

// Dual solution
typedef struct {
  cpg_float    *d0;        // Your dual variable for constraint d0
  cpg_float    *d1;        // Your dual variable for constraint d1
  cpg_float    *d2;        // Your dual variable for constraint d2
  cpg_float    *d3;        // Your dual variable for constraint d3
  cpg_float    *d4;        // Your dual variable for constraint d4
  cpg_float    *d5;        // Your dual variable for constraint d5
  cpg_float    *d6;        // Your dual variable for constraint d6
  cpg_float    *d7;        // Your dual variable for constraint d7
  cpg_float    *d8;        // Your dual variable for constraint d8
  cpg_float    *d9;        // Your dual variable for constraint d9
  cpg_float    *d10;       // Your dual variable for constraint d10
  cpg_float    *d11;       // Your dual variable for constraint d11
  cpg_float    *d12;       // Your dual variable for constraint d12
  cpg_float    *d13;       // Your dual variable for constraint d13
  cpg_float    *d14;       // Your dual variable for constraint d14
  cpg_float    *d15;       // Your dual variable for constraint d15
  cpg_float    d16;        // Your dual variable for constraint d16
  cpg_float    *d17;       // Your dual variable for constraint d17
  cpg_float    *d18;       // Your dual variable for constraint d18
  cpg_float    d19;        // Your dual variable for constraint d19
  cpg_float    *d20;       // Your dual variable for constraint d20
  cpg_float    *d21;       // Your dual variable for constraint d21
} CPG_Dual_t;

// Solver information
typedef struct {
  cpg_float    obj_val;    // Objective function value
  cpg_int      iter;       // Number of iterations
  cpg_int      status;     // Solver status
  cpg_float    pri_res;    // Primal residual
  cpg_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t *prim;        // Primal solution
  CPG_Dual_t *dual;        // Dual solution
  CPG_Info_t *info;        // Solver info
} CPG_Result_t;

// Parameter deltas
typedef struct {
  cpg_float    *Ak_0;      // Delta of your parameter Ak_0
  cpg_float    *Bk_minus_0;   // Delta of your parameter Bk_minus_0
  cpg_float    *Bk_plus_0;   // Delta of your parameter Bk_plus_0
  cpg_float    *ck;        // Delta of your parameter ck
  cpg_float    *Ak_1;      // Delta of your parameter Ak_1
  cpg_float    *Bk_minus_1;   // Delta of your parameter Bk_minus_1
  cpg_float    *Bk_plus_1;   // Delta of your parameter Bk_plus_1
  cpg_float    *Ak_2;      // Delta of your parameter Ak_2
  cpg_float    *Bk_minus_2;   // Delta of your parameter Bk_minus_2
  cpg_float    *Bk_plus_2;   // Delta of your parameter Bk_plus_2
  cpg_float    *Ak_3;      // Delta of your parameter Ak_3
  cpg_float    *Bk_minus_3;   // Delta of your parameter Bk_minus_3
  cpg_float    *Bk_plus_3;   // Delta of your parameter Bk_plus_3
  cpg_float    *Ak_4;      // Delta of your parameter Ak_4
  cpg_float    *Bk_minus_4;   // Delta of your parameter Bk_minus_4
  cpg_float    *Bk_plus_4;   // Delta of your parameter Bk_plus_4
  cpg_float    *Ak_5;      // Delta of your parameter Ak_5
  cpg_float    *Bk_minus_5;   // Delta of your parameter Bk_minus_5
  cpg_float    *Bk_plus_5;   // Delta of your parameter Bk_plus_5
  cpg_float    *Ak_6;      // Delta of your parameter Ak_6
  cpg_float    *Bk_minus_6;   // Delta of your parameter Bk_minus_6
  cpg_float    *Bk_plus_6;   // Delta of your parameter Bk_plus_6
  cpg_float    *Ak_7;      // Delta of your parameter Ak_7
  cpg_float    *Bk_minus_7;   // Delta of your parameter Bk_minus_7
  cpg_float    *Bk_plus_7;   // Delta of your parameter Bk_plus_7
  cpg_float    *Ak_8;      // Delta of your parameter Ak_8
  cpg_float    *Bk_minus_8;   // Delta of your parameter Bk_minus_8
  cpg_float    *Bk_plus_8;   // Delta of your parameter Bk_plus_8
  cpg_float    *Ak_9;      // Delta of your parameter Ak_9
  cpg_float    *Bk_minus_9;   // Delta of your parameter Bk_minus_9
  cpg_float    *Bk_plus_9;   // Delta of your parameter Bk_plus_9
  cpg_float    *Ak_10;     // Delta of your parameter Ak_10
  cpg_float    *Bk_minus_10;   // Delta of your parameter Bk_minus_10
  cpg_float    *Bk_plus_10;   // Delta of your parameter Bk_plus_10
  cpg_float    *Ak_11;     // Delta of your parameter Ak_11
  cpg_float    *Bk_minus_11;   // Delta of your parameter Bk_minus_11
  cpg_float    *Bk_plus_11;   // Delta of your parameter Bk_plus_11
  cpg_float    *Ak_12;     // Delta of your parameter Ak_12
  cpg_float    *Bk_minus_12;   // Delta of your parameter Bk_minus_12
  cpg_float    *Bk_plus_12;   // Delta of your parameter Bk_plus_12
  cpg_float    *Ak_13;     // Delta of your parameter Ak_13
  cpg_float    *Bk_minus_13;   // Delta of your parameter Bk_minus_13
  cpg_float    *Bk_plus_13;   // Delta of your parameter Bk_plus_13
  cpg_float    *x_0;       // Delta of your parameter x_0
  cpg_float    *x_f;       // Delta of your parameter x_f
  cpg_float    *x_ref;     // Delta of your parameter x_ref
  cpg_float    *u_ref;     // Delta of your parameter u_ref
} CPG_Delta_t;

// Solver settings
typedef struct {
  cpg_float  feastol;
  cpg_float  abstol;
  cpg_float  reltol;
  cpg_float  feastol_inacc;
  cpg_float  abstol_inacc;
  cpg_float  reltol_inacc;
  cpg_int    maxit;
} Canon_Settings_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern cpg_float cpg_params_vec[1536];

// Sparse mappings from user-defined to canonical parameters
extern cpg_csc canon_A_map;
extern cpg_csc canon_b_map;
extern cpg_csc canon_h_map;

// Canonical parameters
extern cpg_float canon_c[438];
extern cpg_float canon_c_conditioning[438];
extern cpg_csc canon_A;
extern cpg_csc canon_A_conditioning;
extern cpg_float canon_b[153];
extern cpg_float canon_b_conditioning[153];
extern cpg_csc canon_G;
extern cpg_csc canon_G_conditioning;
extern cpg_float canon_h[600];
extern cpg_float canon_h_conditioning[600];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;
extern Canon_Params_t Canon_Params_conditioning;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// User-defined variables
extern cpg_float cpg_U[45];
extern cpg_float cpg_V[98];
extern cpg_float cpg_v_0[7];
extern cpg_float cpg_v_N[6];
extern cpg_float cpg_eta[15];
extern cpg_float cpg_X[105];
extern cpg_float cpg_p[3];

// Dual variables associated with user-defined constraints
extern cpg_float cpg_d0[7];
extern cpg_float cpg_d1[7];
extern cpg_float cpg_d2[7];
extern cpg_float cpg_d3[7];
extern cpg_float cpg_d4[7];
extern cpg_float cpg_d5[7];
extern cpg_float cpg_d6[7];
extern cpg_float cpg_d7[7];
extern cpg_float cpg_d8[7];
extern cpg_float cpg_d9[7];
extern cpg_float cpg_d10[7];
extern cpg_float cpg_d11[7];
extern cpg_float cpg_d12[7];
extern cpg_float cpg_d13[7];
extern cpg_float cpg_d14[15];
extern cpg_float cpg_d15[15];
extern cpg_float cpg_d17[9];
extern cpg_float cpg_d18[9];
extern cpg_float cpg_d20[36];
extern cpg_float cpg_d21[15];

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// Struct containing solver settings
extern Canon_Settings_t Canon_Settings;

// ECOS array of SOC dimensions
extern cpg_int ecos_q[46];

// ECOS workspace
extern pwork* ecos_workspace;

// ECOS exit flag
extern cpg_int ecos_flag;
